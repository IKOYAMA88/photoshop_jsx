/*スマートオブジェクトをリンクファイルに変更する*/var doc = activeDocument;var activeLayer = doc.activeLayer;var win;var removeflag = false;//元ファイルを削除するかどうかのフラグvar originalLayer;if(doc&&activeLayer){    makeGUI();}else{    alert("ドキュメントを開いてから実行して下さい");}/*FUNCIONS*****************************************************/function main(){        if(win.selectFolder.value){        //フォルダを指定        var folderObj = Folder.selectDialog("フォルダ選択");    }else{        //元ファイルと同じフォルダに保存       var folderObj = doc.path;    }    //新しいファイルを作成    var newName = activeLayer .name;        var fullName = folderObj + "/" + newName +".psd";        //スマートオブジェクトを別psdとしてエクスポート    saveSmartObject(fullName);    //エクスポートしたpsdをリンクアイテムとして配置    linkFile(fullName);        if(removeflag){        //新しいリンクアイテムの位置調整        transferObject(doc.activeLayer,activeLayer);                //古いスマートオブジェクト削除                deleteOldLayer();    }}function makeGUI(){    win = new Window("dialog","リンクされたアイテムに変換",[100,100,340,270]);    win.sameFolder = win.add("radiobutton",[20,10,300,60],"元ファイルと同じフォルダに保存");    win.selectFolder = win.add("radiobutton",[20,40,300,90],"フォルダを指定");    win.sameFolder.value= true;    win.button1 = win.add("button",[60,100,180,120],"実行する");    win.button2 = win.add("button",[80,130,160,150],"キャンセル");    win.button1.onClick = function(){        win.close();        if(1){//TODO：スマートオブジェクトを選択しているかどうかの判定            main();        } else{            alert("スマートオブジェクトを選択して下さい");        }        }    win.button2.onClick = function(){        win.close();    }    win.show();}function saveSmartObject(newfile){    //スマートオブジェクトを開く    var idplacedLayerEditContents = stringIDToTypeID( "placedLayerEditContents" );    var desc10 = new ActionDescriptor();    executeAction( idplacedLayerEditContents, desc10, DialogModes.NO );    // 開いたスマートオブジェクトをPSDで保存=======================================================    var idsave = charIDToTypeID( "save" );    var desc11 = new ActionDescriptor();    var idAs = charIDToTypeID( "As  " );    var desc12 = new ActionDescriptor();    var idmaximizeCompatibility = stringIDToTypeID( "maximizeCompatibility" );    desc12.putBoolean( idmaximizeCompatibility, true );    var idPhtthree = charIDToTypeID( "Pht3" );    desc11.putObject( idAs, idPhtthree, desc12 );    var idIn = charIDToTypeID( "In  " );    desc11.putPath( idIn, new File(newfile) );    var idDocI = charIDToTypeID( "DocI" );    desc11.putInteger( idDocI, 49 );    var idLwCs = charIDToTypeID( "LwCs" );    desc11.putBoolean( idLwCs, true );    var idsaveStage = stringIDToTypeID( "saveStage" );    var idsaveStageType = stringIDToTypeID( "saveStageType" );    var idsaveBegin = stringIDToTypeID( "saveBegin" );    desc11.putEnumerated( idsaveStage, idsaveStageType, idsaveBegin );    executeAction( idsave, desc11, DialogModes.NO );    // 開いたスマートオブジェクトをPSDで保存=======================================================    var idsave = charIDToTypeID( "save" );    var desc13 = new ActionDescriptor();    var idAs = charIDToTypeID( "As  " );    var desc14 = new ActionDescriptor();    var idmaximizeCompatibility = stringIDToTypeID( "maximizeCompatibility" );    desc14.putBoolean( idmaximizeCompatibility, true );    var idPhtthree = charIDToTypeID( "Pht3" );    desc13.putObject( idAs, idPhtthree, desc14 );    var idIn = charIDToTypeID( "In  " );    desc13.putPath( idIn, new File(newfile));    var idDocI = charIDToTypeID( "DocI" );    desc13.putInteger( idDocI, 49 );    var idLwCs = charIDToTypeID( "LwCs" );    desc13.putBoolean( idLwCs, true );    var idsaveStage = stringIDToTypeID( "saveStage" );    var idsaveStageType = stringIDToTypeID( "saveStageType" );    var idsaveSucceeded = stringIDToTypeID( "saveSucceeded" );    desc13.putEnumerated( idsaveStage, idsaveStageType, idsaveSucceeded );    executeAction( idsave, desc13, DialogModes.NO );    // 保存オプション：置換する=======================================================    var idupdatePlacedLayer = stringIDToTypeID( "updatePlacedLayer" );    executeAction( idupdatePlacedLayer, undefined, DialogModes.NO );        // 閉じる=======================================================    var idCls = charIDToTypeID( "Cls " );    executeAction( idCls, undefined, DialogModes.NO );    //activeDocument.close();    }function linkFile(newfile){        // リンクを配置=======================================================    var idPlc = charIDToTypeID( "Plc " );    var desc15 = new ActionDescriptor();    var idnull = charIDToTypeID( "null" );    desc15.putPath( idnull, new File(newfile) );    //alert("ポイント１");    var idLnkd = charIDToTypeID( "Lnkd" );    desc15.putBoolean( idLnkd, true );    var idFTcs = charIDToTypeID( "FTcs" );    var idQCSt = charIDToTypeID( "QCSt" );    var idQcsa = charIDToTypeID( "Qcsa" );    desc15.putEnumerated( idFTcs, idQCSt, idQcsa );    var idOfst = charIDToTypeID( "Ofst" );    var desc16 = new ActionDescriptor();    var idHrzn = charIDToTypeID( "Hrzn" );    var idPxl = charIDToTypeID( "#Pxl" );    desc16.putUnitDouble( idHrzn, idPxl, 0.000000 );    var idVrtc = charIDToTypeID( "Vrtc" );    var idPxl = charIDToTypeID( "#Pxl" );    desc16.putUnitDouble( idVrtc, idPxl, 0.000000 );    var idOfst = charIDToTypeID( "Ofst" );    desc15.putObject( idOfst, idOfst, desc16 );    var idWdth = charIDToTypeID( "Wdth" );    var idPrc = charIDToTypeID( "#Prc" );    desc15.putUnitDouble( idWdth, idPrc, 100.000000 );    var idHght = charIDToTypeID( "Hght" );    var idPrc = charIDToTypeID( "#Prc" );    desc15.putUnitDouble( idHght, idPrc, 100.000000 );    executeAction( idPlc, desc15, DialogModes.NO );    removeflag = true;}function deleteOldLayer(){    var idslct = charIDToTypeID( "slct" );    var desc21 = new ActionDescriptor();    var idnull = charIDToTypeID( "null" );    var ref6 = new ActionReference();    var idLyr = charIDToTypeID( "Lyr " );    var idOrdn = charIDToTypeID( "Ordn" );    var idBckw = charIDToTypeID( "Bckw" );    ref6.putEnumerated( idLyr, idOrdn, idBckw );    desc21.putReference( idnull, ref6 );    var idMkVs = charIDToTypeID( "MkVs" );    desc21.putBoolean( idMkVs, false );    executeAction( idslct, desc21, DialogModes.NO );        activeLayer .remove();}function transferObject(newObj,oldObj){    var scaleX = (oldObj.bounds[2] - oldObj.bounds[0])/(newObj.bounds[2] - newObj.bounds[0])*100;    var scaleY = (oldObj.bounds[3] - oldObj.bounds[1])/(newObj.bounds[3] - newObj.bounds[1])*100;    newObj.resize(scaleX,scaleY);    newObj.translate(oldObj.bounds[0] -newObj.bounds[0], oldObj.bounds[1] -newObj.bounds[1]);} 