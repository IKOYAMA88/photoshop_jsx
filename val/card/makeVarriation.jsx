/*********************************************キャラカードの限界突破バリエーションを自動的に生成します。wrote by IKOYAMA********************************************///カード画像作業用のディレクトリを入力して下さい//末尾のスラッシュ忘れずにvar root = "~/Desktop/card/";/********************************************/var folderList =[    new Folder(root+"battleL/"),    new Folder(root+"battleR/"),    new Folder(root+"flash_battle/"),    new Folder(root+"full/"),    new Folder(root+"icon/"),];var folderObj;var fileList = [];var targetLayerName = ["d1", "d2", "d3", "d4"];//var typeLayerName = ["t1", "t2", "t3",];var document;var layers;/********************************************/for(var j = 0; j<folderList.length; j++){    folderObj = folderList[j];    var tempList = folderObj.getFiles("*.psd");    getFolderObj();    function getFolderObj(){        if (folderObj != null) {            for (var i = 0; i < tempList.length; i++) {                var obj = tempList[i];                if (/^\d{5}$/.test(getName(obj)) || (/^\d{5}$/.test(getName(obj)) + "a")) {                    fileList.push(obj);                }            }            init();        } else {            alert("psdファイルがみつかりませんでした");        }    }    folderFormat();}alert("完了しました");/********************************************/function fileFormat(){    document = null;    layers = null;}function folderFormat(){    fileList = [];}function init() {    for (var f = 0; f <= fileList.length - 1; f++) {        var fileObj = new File(fileList[f]);        open(fileObj);                var targetLayer = [];                document = activeDocument;        layers = document.layers;                targetLayer = getLayer(layers);        //alert(targetLayer);        targetLayer.sort();                for (var i = 0; i <= 4; i++) {            if (i == 0) {                noOneVisiable(targetLayer);            } else {                targetLayer[i - 1].visible = true;            }            saveFile(fileObj, i);        }            reset();        activeDocument.close(SaveOptions.DONOTSAVECHANGES);        fileFormat();    }}function getLayer(_layers) { //限界突破用のレイヤーを取得する    var num = _layers.length;    var _targetLayer = [];    for (var i = 0; i < num; i++) {        var layer = _layers[i];        if(layer){            if (layer.typename == "LayerSet" && layer.visible && ((layer.name == "full")||(layer.name == "icon"))) {            //if (layer.typename == "LayerSet" && layer.visible) {                //alert(document.path + "：" +  layer.name + "：" + layer.layers[0]);                _targetLayer = getLayer(layer.layers);            } else if (tagetFlag(layer.name)) {                _targetLayer.push(layer);            }        }    }    return _targetLayer;}function tagetFlag(_layerName) { //限界突破用のレイヤーかどうか判定    var num = targetLayerName.length;    for (var i = 0; i < num; i++) {        var bool = (_layerName == targetLayerName[i]);        if (bool) {            return true;            break;        }    }    return false;}function noOneVisiable(_targetLayer) { //限界突破のレイヤーを非表示にする    var num = _targetLayer.length;    for (var i = 0; i < num; i++) {        //var layerName = targetLayer[i].name;        _targetLayer[i].visible = false;    }}function saveFile(_fileObj, _i) {    var psdOpt = new PhotoshopSaveOptions();    var fname = getName(_fileObj);        if(fname.search("a")>0){   //覚醒カードの場合、書き出し先を変更する                savefile = new File(folderObj.fsName + "/" + fname.split("a")[0] + _i + "a" + ".psd");    }else{        savefile = new File(folderObj.fsName + "/" + fname + _i + ".psd");    }        activeDocument.saveAs(savefile, psdOpt, true, Extension.LOWERCASE);}function getName(_fileObj) {    var di = (_fileObj.name).lastIndexOf("."); //　fileObj.nameの値で"."の位置を取得    var name = (_fileObj.name).substr(0, di);    return name;}function reset() {    document = null;    layers = null;}   