app.displayDialogs = DialogModes.NO; preferences.rulerUnits = Units.PIXELS;/*************************************************************** 【概要】 大砲のパーツをトリミングして上書き保存するスクリプトです。  photoshop用です。  【使い方】 【1】トリミングしていない大砲のパーツをgitと同じ構成でフォルダに入れます。    (exportAvatar4ai_cannon.jsxをillustratorで使用すると自動的にそうなります。) 【2】photoshopを起動し、ファイル > スクリプト > 参照からこのjsxファイルを選択します。 【3】【1】で用意したディレクトリを選択します。 【4】自動的にトリミング→上書きされます。    ****************************************************************2013.12.20 IKOYAMA  作成 2014.12.03 IKOYAMA  アバター用を大砲用に改造 **************************************************************/var rootFolder ;var rootFolder ;var rootFile;var trimed;//トリミングできたかどうかのbool値var fileList=[];//ここにpngファイルを全て格納するvar folder_orginal;var partsList=[{parts_name:'head',x:310,y:30,width:280,height:250},{parts_name:'foot',x:120,y:200,width:320,height:210},{parts_name:'body',x:10,y:80,width:370,height:280}];/*******************************************/main();function main(){    alert("元ファイルの場所を選択してください");    folder_orginal = Folder.selectDialog();    getAllFiles(folder_orginal.getFiles());    for(var i = 0; i < fileList.length; i++){    //for(var i =0; i<1; i++){            resetVar();            open(fileList[i]);        settingVar();        if(doc.width == 601 && doc.height == 441){             var obj = getType(doc.path);            trimDoc();            //trimDoc(obj)            if(trimed){                savePNG();            }        }        doc.close(SaveOptions.DONOTSAVECHANGES);    }}/*******************************************///ディレクトリを潜って全てのpngファイルを取得するfunction getAllFiles(_files){        var tempFileList = [];        var tempFolderList = [];                for(var i=0;i<_files.length;i++){            var path = String(_files[i]);            if(path.indexOf(".png")>0){                                fileList.push(_files[i]);            }else if(path.indexOf(".")<0){                tempFolderList.push(_files[i]);                            }        }        for(var i = 0; i<tempFolderList.length; i++){            folder_orginal = null;            getAllFiles(tempFolderList[i].getFiles());        }}//いろんな変数に値を突っ込むfunction settingVar(){    doc = activeDocument;    layers = activeDocument.layers;}//変数の値を取り除くfunction resetVar(){    doc = null;    layers = null;}//パスを受け取り{type:hoge,gender:1or2}のオブジェクトを返すfunction getType(_path){    var typeName;    var gen;    if(String(_path).indexOf("protector")==-1){//頭        var tempArr = String(_path).split("/");        typeName = tempArr[tempArr .length-1];        gen = doc.name.charAt(doc.name.length-5);    }else{//防具                typeName = doc.name.split(".")[0];                        var tempArr = String(_path).split("/");                tempStr = tempArr[tempArr.length-1];        gen = tempStr.charAt(tempStr.length-1);    }    return {type:typeName,gender:gen};}//画像をトリミングするfunction trimDoc(){       for(var j=0; j<partsList.length; j++){                                     var folderPath = String(doc.path).split("/");        var name_test = (folderPath[folderPath.length - 1] == partsList[j].parts_name);                if(name_test){            var obj = partsList[j];            doc.resizeCanvas((doc.width-obj.x),(doc.height-obj.y),AnchorPosition.BOTTOMRIGHT);            doc.resizeCanvas(obj.width,obj.height,AnchorPosition.TOPLEFT);                                     trimed = true;            break;                       }else if(j == partsList.length-1){            alert(_obj.type+"は未定義のパーツです");            trimed = false;        }           }}//png24で上書き保存するfunction savePNG() {	var exp = new ExportOptionsSaveForWeb();	exp.format = SaveDocumentType.PNG;	exp.interlaced　= false;    exp.PNG8 = false;	var fileObj = new File(doc.path+"/"+doc.name);	activeDocument.exportDocument(fileObj,ExportType.SAVEFORWEB,exp);}